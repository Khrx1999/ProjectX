"""
Recent Defects Prepare Module
‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

Author: Tassana Khrueawan
Version: 1.0.1 (Logging Style Update)
"""

from typing import Dict, Any, List
from datetime import datetime
from robot.api import logger
import os
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from UTILS import get_logger

logger = get_logger("RecentDefectsPrepare")

def prepare_recent_defects_data(defects_data: List[Dict[str, Any]], limit: int = 15) -> Dict[str, Any]:
    """
    ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà reported ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)

    Args:
        defects_data (List[Dict[str, Any]]): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        limit (int): ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á

    Returns:
        Dict[str, Any]: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects
    """
    try:
        # Icon map for severity and status
        SEVERITY_ICON = {
            'Critical': 'üî•', 'Major': '‚ö†Ô∏è', 'Moderate': 'üî∂', 
            'Minor': 'üîπ', 'Trivial': '‚¨áÔ∏è', 'Unknown': '‚ùì',
        }
        STATUS_ICON = {
            'Open': 'üî¥', 'In progress': 'üü°', 'Reopened': 'üîÅ',
            'New': 'üÜï', 'Ready to test': 'üü¶', 'Ready to dev': '‚ö™',
            'Closed': '‚úÖ', 'Fixed': 'üü¢', 'Resolved': 'üü¢',
            'Completed': 'üü¢', 'Done': 'üü¢',
        }
        logger.info("‚Äî‚Äî ‡∏ú‡∏•‡∏£‡∏ß‡∏° Recent Defects ‚Äî‚Äî")

        if not defects_data:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• defects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Recent Defects")
            logger.info("‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á)")
            return {"recent_defects": []}
            
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        def parse_date(date_str):
            if not date_str:
                return None
            for fmt in ("%Y-%m-%d", "%Y-%m-%d %H:%M:%S", "%d/%m/%Y"): # ‡πÄ‡∏û‡∏¥‡πà‡∏° format ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                try:
                    return datetime.strptime(date_str, fmt)
                except ValueError:
                    pass
            logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date_str}")
            return None

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° reported_date_obj ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        defects_with_date = []
        for defect in defects_data:
            reported_date_str = defect.get('reportedDate', defect.get('created_date', ''))
            reported_date_obj = parse_date(reported_date_str)
            defect_copy = defect.copy()
            defect_copy['reported_date_obj'] = reported_date_obj if reported_date_obj else datetime.min
            defects_with_date.append(defect_copy)
                
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà reported (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô)
        sorted_defects = sorted(defects_with_date, key=lambda x: x['reported_date_obj'], reverse=True)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô limit ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        recent_defects_list = []
        for defect in sorted_defects[:limit]:
            sev = str(defect.get('severity', 'Unknown')).capitalize()
            status = str(defect.get('status', 'Unknown')).capitalize()
            recent_defect = {
                'id': defect.get('issueId', defect.get('id', 'N/A')),
                'description': defect.get('description', 'No description'),
                'severity': sev,
                'status': status,
                'module': defect.get('module', 'Unknown'),
                'reportedDate': defect.get('reportedDate', 'N/A'),
                # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô template ‡πÑ‡∏î‡πâ
            }
            recent_defects_list.append(recent_defect)
        
        # Meta summary
        logger.info(
            "‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {} | ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°: {} ~ {}".format(
                len(recent_defects_list),
                recent_defects_list[-1]['reportedDate'] if recent_defects_list else 'N/A',
                recent_defects_list[0]['reportedDate'] if recent_defects_list else 'N/A'
            )
        )

        # Flat per-record log in nice format with icons (like "table")
        if recent_defects_list:
            logger.info("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
            for row in recent_defects_list:
                sevicon = SEVERITY_ICON.get(row['severity'], '‚Ä¢')
                sticon = STATUS_ICON.get(row['status'], '‚Ä¢')
                logger.info(
                    "  {} [{}] {} {} @ {} ({}) | {}".format(
                        sevicon, row['id'], row['severity'], sticon + row['status'] if sticon != '‚Ä¢' else row['status'],
                        row['module'], row['reportedDate'], row['description'][:60]
                    )
                )
        else:
            logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (recent_defects_list ‡∏ß‡πà‡∏≤‡∏á)")
            
        # Summary block at the end
        logger.info("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ Recent Defects Data:")
        logger.info("  ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {}".format(len(recent_defects_list)))
        severity_count = {}
        for row in recent_defects_list:
            severity_count[row['severity']] = severity_count.get(row['severity'], 0) + 1
        if severity_count:
            logger.info("  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Severity: {{{}}}".format(
                ", ".join("{} {}: {}".format(SEVERITY_ICON.get(sev, '‚Ä¢'), sev, cnt) for sev, cnt in severity_count.items())
            ))
        status_count = {}
        for row in recent_defects_list:
            status_count[row['status']] = status_count.get(row['status'], 0) + 1
        if status_count:
            logger.info("  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Status: {{{}}}".format(
                ", ".join("{} {}: {}".format(STATUS_ICON.get(st, '‚Ä¢'), st, cnt) for st, cnt in status_count.items())
            ))

        logger.info("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Recent Defects Data")
        return {"recent_defects": recent_defects_list}
    except Exception as e:
        logger.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Recent Defects Data: {}".format(str(e)))
        return {"recent_defects": []}
