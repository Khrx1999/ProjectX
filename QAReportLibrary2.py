from robot.api import logger
from robot.api.deco import keyword
import os
import json
from datetime import datetime
import sys
import platform

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Import core modules
from CORE.report_service import ReportService
from CORE.metrics_calculator import calculate_test_metrics, calculate_defect_metrics
from CORE.defect_analyzer import analyze_defects, prepare_defect_analysis_data, calculate_sla_metrics, get_defect_trends
from CORE.test_summary_prepare import prepare_test_summary_data, determine_risk_level, generate_risk_recommendation
from CORE.defect_trend_prepare import prepare_defect_trend_analysis_data
from CORE.test_trend_prepare import prepare_test_trend_analysis_data
from CORE.module_testing_prepare import prepare_module_testing_status_data
from CORE.defect_distribution_prepare import prepare_defect_distribution_data
from CORE.defect_resolution_prepare import prepare_defect_resolution_time_data
from CORE.recent_defects_prepare import prepare_recent_defects_data

# Import infrastructure modules
from INFRASTRUCTURE.test_data_loader import TestDataLoader
from INFRASTRUCTURE.defect_data_loader import DefectDataLoader
from INFRASTRUCTURE.html_renderer import HTMLRenderer

# Import utilities
from UTILS.utils import get_logger, setup_logging
from UTILS import format_datetime_thai, calculate_sprint_days, clear_cache

# Import TemplateFinder
from TemplateFinder import TemplateFinder

class QAReportLibrary2:
    """
    QA Report Library for Robot Framework
    """
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
    
    def __init__(self):
        self.data_cache = {}
        self.defect_cache = {}
        self.template_cache = {}
        self.report_data = {}
        

        self.report_data_test_summary = {}
        self.report_data_defect_trend = {}
        self.report_data_test_trend = {}
        self.report_data_module_status = {}
        self.report_data_defect_distribution = {}
        self.report_data_resolution_time = {}
        self.report_data_recent_defects = {}
        
        self.library_path = os.path.dirname(os.path.abspath(__file__))
        
        self.setup_logging()
        self.logger = get_logger("QAReportLibrary")
        self.logger.info(f"QAReportLibrary initialized from: {self.library_path}")
        
        self.report_service = ReportService()
        self.test_data_loader = TestDataLoader()
        self.defect_data_loader = DefectDataLoader()
        self.html_renderer = HTMLRenderer()
        
        self.project_root = os.path.dirname(os.path.abspath(__file__))
        self.template_name = None
        self.data_file = None
        self.defects_file = None 
        self.output_dir = None
        self.test_data = None
        self.defects_data = []

    def setup_logging(self, log_level: str = "INFO", log_to_file: bool = True) -> None:
        log_dir = os.path.join(os.path.dirname(self.library_path), "LOG")
        os.makedirs(log_dir, exist_ok=True)
        
        today = datetime.now().strftime("%Y-%m-%d")
        log_file_path = os.path.join(log_dir, f"qa_report_{today}.log")
        
        setup_logging(log_level=log_level, log_to_file=log_to_file, log_file_path=log_file_path)
        
        if not hasattr(self, '_logging_setup_done'):
            logger = get_logger("QAReportLibrary.Setup")
            logger.info(f"Logging setup complete. Log file: {log_file_path if log_to_file else 'None'}")
            self._logging_setup_done = True

    @keyword("Setup QA Report")
    def setup_qa_report(self, data_file: str, template_path: str, output_dir: str, defects_file: str = None) -> dict:
        logger = get_logger("QAReportLibrary.Setup")
        log_file_path = os.path.abspath(
            os.path.join(os.path.dirname(self.library_path), "LOG",
                         f"qa_report_{datetime.now().strftime('%Y-%m-%d')}.log")
        )
        logger.info("üì¶ [SYSTEM] Logging Initialized")
        logger.info(f"\n‚Ä¢ Log File: {log_file_path}\n")
        logger.info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
        logger.info("üõ† [SETUP] QA Report Environment")
        logger.info(f"‚û§ Data Source: {os.path.abspath(data_file)}")
        if defects_file:
            logger.info(f"‚û§ Defect Source: {os.path.abspath(defects_file)}")
        else:
            logger.info("‚û§ Defect Source: (None Provided)")        
        logger.info(f"‚û§ Template File: {os.path.abspath(template_path)}")
        logger.info(f"‚û§ Output Directory: {os.path.abspath(output_dir)}")
        if not os.path.exists(data_file):
            logger.error(f"[ERROR] Data file not found: {data_file}")
            logger.info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
            raise FileNotFoundError(f"Data file not found: {data_file}")
            
        if not os.path.exists(template_path):
            logger.error(f"[ERROR] Template file not found: {template_path}")
            logger.info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
            raise FileNotFoundError(f"Template file not found: {template_path}")
            
        if defects_file and not os.path.exists(defects_file):
            logger.warning(f"‚ö†Ô∏è [WARN] Defects file not found: {defects_file}")
        
        # 4. Output directory
        os.makedirs(output_dir, exist_ok=True)
        
        # 5. ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ç‡∏≠‡∏á class
        self.data_file = data_file
        self.defects_file = defects_file
        self.template_name = template_path
        self.output_dir = output_dir
        
        # 6. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                self.test_data = json.load(f)
            logger.info("Test data loaded successfully")
        except Exception as e:
            logger.error(f"[ERROR] Failed to load test data: {str(e)}")
            logger.info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
            raise Exception(f"Failed to load test data: {str(e)}")
        
        # 7. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if defects_file:
            try:
                with open(defects_file, 'r', encoding='utf-8') as f:
                    defects_content = json.load(f)
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• defects
                if isinstance(defects_content, dict) and "defects" in defects_content:
                    self.defects_data = defects_content["defects"]
                elif isinstance(defects_content, list):
                    self.defects_data = defects_content
                else:
                    self.defects_data = []
                    
                logger.info(f"Defects data loaded successfully. Total: {len(self.defects_data)} defects")
            except Exception as e:
                logger.error(f"[ERROR] Failed to load defects data: {str(e)}")
                self.defects_data = []
        
        # 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö report
        self.report_data = {
            "TEMPLATE_PATH": template_path,
            "OUTPUT_DIR": output_dir,
            "ENVIRONMENT_INFO": {
                "PYTHON_VERSION": platform.python_version(),
                "SYSTEM": platform.system(),
                "PROCESSOR": platform.processor(),
                "REPORT_GENERATED_TIME": format_datetime_thai(datetime.now())
            }
        }
        
        logger.info("Environment Setup: Complete\n")
        logger.info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
        
        return {
            "status": "success",
            "data_file": data_file,
            "template_path": template_path,
            "output_dir": output_dir,
            "defects_file": defects_file
        }
    
    @keyword("Prepare Test Summary Data")
    def prepare_test_summary_data(self, data_file: str = None) -> dict:
        logger = get_logger("QAReportLibrary.TestSummary")
        data_file = data_file or self.data_file
        if not data_file:
            logger.error("No data file provided for Test Summary Data preparation")
            return {}
        
        logger.info(f"Preparing Test Summary Data from: {os.path.abspath(data_file)}")
        
        if not os.path.exists(data_file):
            logger.error(f"Data file not found: {data_file}")
            return {}
        
        if not self.test_data:
            try:
                with open(data_file, 'r', encoding='utf-8') as f:
                    self.test_data = json.load(f)
                logger.info(f"Test data loaded successfully from: {data_file}")
            except Exception as e:
                logger.error(f"Failed to load test data: {str(e)}")
                return {}
        
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô self.report_data_test_summary ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà self.report_data
            self.report_data_test_summary = prepare_test_summary_data(self.test_data, data_file)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö report ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
            self.report_data.update(self.report_data_test_summary)
            
            logger.info("Test Summary Data prepared successfully")
            logger.info(f"  TOTAL_TEST_CASES: {self.report_data_test_summary.get('TOTAL_TEST_CASES', 0)}")
            logger.info(f"  PASSED_TEST_CASES: {self.report_data_test_summary.get('PASSED_TEST_CASES', 0)}")
            logger.info(f"  FAILED_TEST_CASES: {self.report_data_test_summary.get('FAILED_TEST_CASES', 0)}")
            logger.info(f"  BLOCKED_TEST_CASES: {self.report_data_test_summary.get('BLOCKED_TEST_CASES', 0)}")
            logger.info(f"  IN_PROGRESS_TEST_CASES: {self.report_data_test_summary.get('IN_PROGRESS_TEST_CASES', 0)}")
            logger.info(f"  NOT_STARTED_TEST_CASES: {self.report_data_test_summary.get('NOT_STARTED_TEST_CASES', 0)}")
            logger.info(f"  PASS_RATE: {self.report_data_test_summary.get('PASS_RATE', 0)}%")
            logger.info(f"  COMPLETION_PROGRESS: {self.report_data_test_summary.get('COMPLETION_PROGRESS', 0)}%")
            logger.info(f"  RISK_LEVEL: {self.report_data_test_summary.get('RISK_LEVEL', 'UNKNOWN')}")
            
            return self.report_data_test_summary
        except Exception as e:
            logger.error(f"Error preparing Test Summary Data: {str(e)}")
            return {}
    
    @keyword("Prepare Defect Trend Analysis Data")
    def prepare_defect_trend_analysis_data(self, defects_file: str = None) -> dict:
        """
        ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö QA Report
        
        Args:
            defects_file (str, optional): ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (JSON) ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å Setup QA Report
        
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á
        """
        logger = get_logger("QAReportLibrary.DefectTrend")
        
        # ‡πÉ‡∏ä‡πâ defects_file ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô setup
        defects_file = defects_file or self.defects_file
        if not defects_file:
            logger.warning("‚ö†Ô∏è No defects file provided for Defect Trend Analysis preparation")
            return {}
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        logger.info(f"‚è≥ Preparing Defect Trend Analysis Data from: {os.path.abspath(defects_file)}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not os.path.exists(defects_file):
            logger.error(f"Defects file not found: {defects_file}")
            return {}
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not self.defects_data:
            try:
                with open(defects_file, 'r', encoding='utf-8') as f:
                    defects_content = json.load(f)
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• defects
                if isinstance(defects_content, dict) and "defects" in defects_content:
                    self.defects_data = defects_content["defects"]
                elif isinstance(defects_content, list):
                    self.defects_data = defects_content
                else:
                    self.defects_data = []
                    
                logger.info(f"Defects data loaded successfully from: {defects_file} ({len(self.defects_data)} defects)")
            except Exception as e:
                logger.error(f"Failed to load defects data: {str(e)}")
                return {}
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Trend
        try:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            self.report_data_defect_trend = prepare_defect_trend_analysis_data(self.defects_data)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô report_data (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
            self.report_data.update(self.report_data_defect_trend)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
            logger.info("Defect Trend Analysis Data prepared successfully")
            logger.info(f"  TOTAL_DEFECTS: {self.report_data_defect_trend.get('TOTAL_DEFECTS', 0)}")
            logger.info(f"  TOTAL_DEFECTS_OPEN: {self.report_data_defect_trend.get('TOTAL_DEFECTS_OPEN', 0)}")
            logger.info(f"  TOTAL_DEFECTS_CLOSED: {self.report_data_defect_trend.get('TOTAL_DEFECTS_CLOSED', 0)}")
            logger.info(f"  TOTAL_DEFECTS_CLOSED_PERCENT: {self.report_data_defect_trend.get('TOTAL_DEFECTS_CLOSED_PERCENT', 0)}%")
            logger.info(f"  AVG_FIX_TIME_DAYS: {self.report_data_defect_trend.get('AVG_FIX_TIME_DAYS', 0)}")
            logger.info(f"  DEFECT_CLOSURE_RATE: {self.report_data_defect_trend.get('DEFECT_CLOSURE_RATE', 0)} per day")
            logger.info(f"  PEAK_DEFECT_DATE: {self.report_data_defect_trend.get('PEAK_DEFECT_DATE', 'N/A')} ({self.report_data_defect_trend.get('PEAK_DEFECT_COUNT', 0)} defects)")
            
            return self.report_data_defect_trend
        except Exception as e:
            logger.error(f"Error preparing Defect Trend Analysis Data: {str(e)}")
            return {}
    
    @keyword("Prepare Test Trend Analysis Data")
    def prepare_test_trend_analysis_data(self, data_file: str = None, defects_file: str = None) -> dict:
        logger = get_logger("QAReportLibrary.TestTrend")
        
        test_data_path = os.path.abspath(data_file) if data_file else self.data_file
        defect_data_path = os.path.abspath(defects_file) if defects_file else self.defects_file

        logger.info(f"Preparing Test Trend Analysis Data from: {test_data_path}")
        if defect_data_path:
            logger.info(f"With defect data from: {defect_data_path}")

        if not self.test_data or test_data_path != self.data_file:
            self.test_data = self.test_data_loader.load(test_data_path)
            self.data_file = test_data_path
            logger.info(f"Test data loaded successfully from: {test_data_path}")
            
        defects_data = None
        if defect_data_path:
            defects_data = self.defect_data_loader.load(defect_data_path)
            logger.info(f"Defect data loaded successfully for Test Trend Analysis")

        try:
            self.report_data_test_trend = prepare_test_trend_analysis_data(self.test_data, defects_data)

            self.report_data.update(self.report_data_test_trend)
            
            logger.info("Test Trend Analysis Data prepared successfully")
            return self.report_data_test_trend
        except Exception as e:
            logger.error(f"Error preparing Test Trend Analysis Data: {str(e)}")
            return {}
    
    @keyword("Prepare Module Testing Status Data")
    def prepare_module_testing_status_data(self, data_file: str = None) -> dict:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Module Testing Status ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡∏î‡∏π‡∏•

        ***| Example |***
        | ${module_status}= | *`Prepare Module Testing Status Data`* | data_file=path/to/test_data.json |

        ***| Parameters |***
        - **`data_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Results

        ***| Returns |***
        - **`dict`**: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Module Testing Status ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Template

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            if not self.test_data:
                logger.warning("‚ö†Ô∏è Test data not loaded. Calling Prepare Test Summary Data first.")
                summary_result = self.prepare_test_summary_data(data_file)
                if not summary_result:
                    return {}
                    
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å CORE/module_testing_prepare.py
            module_status_data = prepare_module_testing_status_data(self.test_data)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó report_data
            self.report_data.update(module_status_data)
            
            return module_status_data
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Module Testing Status Data: {str(e)}")
            return {}
    
    @keyword("Prepare Defect Distribution Data")
    def prepare_defect_distribution_data(self, defects_file: str = None) -> dict:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Distribution ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á

        ***| Example |***
        | ${defect_distribution}= | *`Prepare Defect Distribution Data`* | defects_file=path/to/defects.json |

        ***| Parameters |***
        - **`defects_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defects

        ***| Returns |***
        - **`dict`**: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Distribution ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Template

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            if not self.defects_data:
                 logger.warning("‚ö†Ô∏è Defects data not loaded. Calling Prepare Defect Trend Analysis Data first.")
                 trend_result = self.prepare_defect_trend_analysis_data(defects_file)
                 # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ prepare_defect_trend_analysis_data ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á self.defects_data = [] ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å CORE/defect_distribution_prepare.py
            defect_distribution_data = prepare_defect_distribution_data(self.defects_data)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó report_data
            self.report_data.update(defect_distribution_data)
            
            return defect_distribution_data
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Defect Distribution Data: {str(e)}")
            return {}
    
    @keyword("Prepare Defect Resolution Time Data")
    def prepare_defect_resolution_time_data(self, defects_file: str = None) -> dict:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Resolution Time ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á

        ***| Example |***
        | ${resolution_time}= | *`Prepare Defect Resolution Time Data`* | defects_file=path/to/defects.json |

        ***| Parameters |***
        - **`defects_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defects

        ***| Returns |***
        - **`dict`**: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Resolution Time ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Template

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            if not self.defects_data:
                logger.warning("‚ö†Ô∏è Defects data not loaded. Calling Prepare Defect Trend Analysis Data first.")
                self.prepare_defect_trend_analysis_data(defects_file)

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å CORE/defect_resolution_prepare.py
            resolution_time_data = prepare_defect_resolution_time_data(self.defects_data)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó report_data
            self.report_data.update(resolution_time_data)
            
            return resolution_time_data
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Defect Resolution Time Data: {str(e)}")
            return {}    
        
    @keyword("Prepare Recent Defects Data")
    def prepare_recent_defects_data(self, defects_file: str = None) -> dict:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

        ***| Example |***
        | ${recent_defects}= | *`Prepare Recent Defects Data`* | defects_file=path/to/defects.json |

        ***| Parameters |***
        - **`defects_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defects

        ***| Returns |***
        - **`dict`**: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Template

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            if not self.defects_data:
                logger.warning("‚ö†Ô∏è Defects data not loaded. Calling Prepare Defect Trend Analysis Data first.")
                self.prepare_defect_trend_analysis_data(defects_file)

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å CORE/recent_defects_prepare.py ‡πÉ‡∏ä‡πâ limit = len(self.defects_data) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            limit = len(self.defects_data) if self.defects_data else 0
            recent_defects_data = prepare_recent_defects_data(self.defects_data, limit=limit)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó report_data
            self.report_data.update(recent_defects_data)
            
            return recent_defects_data
            
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Recent Defects Data: {str(e)}")
            return {}
        
    @keyword("Prepare Report Data")
    def prepare_report_data(self, data_file: str = None, defects_file: str = None) -> dict:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QA ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á Test/Defect (7 prepares)

        ***| Example |***
        | ${report_data}= | *`Prepare Report Data`* | data_file=path/to/test_data.json | defects_file=path/to/defects.json |

        ***| Parameters |***
        - **`data_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Results
        - **`defects_file`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defects

        ***| Returns |***
        - **`dict`**: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

        ***| Create By |***
        | *`Tassana Khrueawan`* | (Revised by AI for full orchestration)
        """
        logger.info("‚è≥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QA (‡∏ó‡∏∏‡∏Å prepare)...")
        # ‡πÉ‡∏ä‡πâ paths ‡∏à‡∏≤‡∏Å parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Setup
        data_path = os.path.abspath(data_file) if data_file else self.data_file
        defects_path = os.path.abspath(defects_file) if defects_file else self.defects_file

        # --- 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Summary ---
        logger.info("--- Prepare Test Summary Data ---")
        test_summary = self.prepare_test_summary_data(data_path)
        self.report_data.update(test_summary or {})

        # --- 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Trend Analysis ---
        logger.info("--- Prepare Defect Trend Analysis Data ---")
        defect_trend = self.prepare_defect_trend_analysis_data(defects_path)
        self.report_data.update(defect_trend or {})

        # --- 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Test Trend Analysis ---
        logger.info("--- Prepare Test Trend Analysis Data ---")
        test_trend = self.prepare_test_trend_analysis_data(data_path, defects_path)
        self.report_data.update(test_trend or {})

        # --- 4. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Module Testing Status ---
        logger.info("--- Prepare Module Testing Status Data ---")
        module_status = self.prepare_module_testing_status_data(data_path)
        self.report_data.update(module_status or {})

        # --- 5. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Distribution ---
        logger.info("--- Prepare Defect Distribution Data ---")
        defect_dist = self.prepare_defect_distribution_data(defects_path)
        self.report_data.update(defect_dist or {})

        # --- 6. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Defect Resolution Time ---
        logger.info("--- Prepare Defect Resolution Time Data ---")
        defect_reso = self.prepare_defect_resolution_time_data(defects_path)
        self.report_data.update(defect_reso or {})

        # --- 7. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Recent Defects ---
        logger.info("--- Prepare Recent Defects Data ---")
        recent_defects = self.prepare_recent_defects_data(defects_path)
        self.report_data.update(recent_defects or {})

        # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ---
        self.report_data["REPORT_GENERATED_TIME"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        return self.report_data

    def _generate_with_html_renderer(self, output_file: str) -> str:
        logger = get_logger("QAReportLibrary.HTMLRenderer")
        
        # Prepare template directory and filename
        template_dir = os.path.dirname(self.template_name)
        template_file = os.path.basename(self.template_name)
        
        # Setup HTML Renderer
        self.html_renderer._setup_environment(template_dir)
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
        template_data = self.report_data.copy()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ render
        logger.info(f"üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ render:")
        logger.info(f"  TOTAL_TEST_CASES: {template_data.get('TOTAL_TEST_CASES')}")
        logger.info(f"  PASSED_TEST_CASES: {template_data.get('PASSED_TEST_CASES')}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô template_data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if self.report_data_test_summary:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test_summary.html ({len(self.report_data_test_summary)} keys)")
            template_data.update(self.report_data_test_summary)
        if self.report_data_test_trend:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test_trend_analysis.html ({len(self.report_data_test_trend)} keys)")
            template_data.update(self.report_data_test_trend)
        if self.report_data_defect_distribution:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö defect_distribution.html ({len(self.report_data_defect_distribution)} keys)")
            template_data.update(self.report_data_defect_distribution)
        if self.report_data_resolution_time:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö defect_resolution_time_analysis.html ({len(self.report_data_resolution_time)} keys)")
            template_data.update(self.report_data_resolution_time)
        if self.report_data_recent_defects:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö defect_recent_defects.html ({len(self.report_data_recent_defects)} keys)")
            template_data.update(self.report_data_recent_defects)
        if self.report_data_module_status:
            logger.info(f"‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö module_testing_status.html ({len(self.report_data_module_status)} keys)")
            template_data.update(self.report_data_module_status)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if 'TREND_ANALYSIS' not in template_data:
            logger.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å test_data")
            if self.test_data and isinstance(self.test_data, dict) and 'TREND_ANALYSIS' in self.test_data:
                template_data['TREND_ANALYSIS'] = self.test_data['TREND_ANALYSIS']
                logger.info("‚úÖ ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡∏à‡∏≤‡∏Å test_data ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                logger.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡πÉ‡∏ô test_data ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô")
                # ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hardcode ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏° module CORE/test_trend_prepare.py
                logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å prepare_test_trend_analysis_data ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS")
                try:
                    from CORE.test_trend_prepare import prepare_test_trend_analysis_data
                    trend_data = prepare_test_trend_analysis_data(self.test_data or {})
                    if trend_data and 'TREND_ANALYSIS' in trend_data:
                        template_data.update(trend_data)
                        logger.info("‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    else:
                        logger.warn("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• TREND_ANALYSIS ‡πÑ‡∏î‡πâ")
                except Exception as e:
                    logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å prepare_test_trend_analysis_data: {str(e)}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ PROGRESS_STATUS ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if 'PROGRESS_STATUS' not in template_data:
            if 'COMPLETION_PROGRESS' in template_data and 'EXPECTED_PROGRESS' in template_data:
                completion = template_data.get('COMPLETION_PROGRESS', 0)
                expected = template_data.get('EXPECTED_PROGRESS', 0)
                if completion >= expected:
                    template_data['PROGRESS_STATUS'] = 'On Track'
                    template_data['PROGRESS_STATUS_COLOR'] = 'bg-green-100 text-green-800'
                else:
                    template_data['PROGRESS_STATUS'] = 'Behind Schedule'
                    template_data['PROGRESS_STATUS_COLOR'] = 'bg-red-100 text-red-800'
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        logger.info(f"üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ render:")
        logger.info(f"  TOTAL_TEST_CASES: {template_data.get('TOTAL_TEST_CASES')}")
        
        # Render HTML
        html_content = self.html_renderer.template_env.get_template(template_file).render(**template_data)
        
        # Save output
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {output_file}")
        return output_file

    @keyword("Generate QA Report")
    def generate_report(self, output_dir: str = None) -> str:
        """
        ***| Description |***
        - Keyword ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QA HTML ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
        - ‡πÉ‡∏ä‡πâ template ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Setup ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ Prepare keywords

        ***| Example |***
        | ${report_path}= | *`Generate QA Report`* | output_dir=path/to/output |

        ***| Parameters |***
        - **`output_dir`** (`str`, optional): Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Directory ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö Report (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Setup)

        ***| Returns |***
        - **`str`**: Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            # ‡πÉ‡∏ä‡πâ output_dir ‡∏à‡∏≤‡∏Å parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Setup
            output_path = os.path.abspath(output_dir) if output_dir else self.output_dir
            
            if not output_path:
                logger.error("‡πÑ‡∏°‡πà‡∏û‡∏ö path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö output directory ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡πà‡∏≤‡∏ô parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Setup QA Report ‡∏Å‡πà‡∏≠‡∏ô")
                return ""
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.report_data:
                 logger.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Prepare Report Data ‡∏Å‡πà‡∏≠‡∏ô")
                 self.prepare_report_data() # ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                 if not self.report_data:
                     logger.error("‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                     return ""
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ template ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.template_name or not os.path.exists(self.template_name):
                logger.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template: {self.template_name}")
                return ""
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á output directory ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            os.makedirs(output_path, exist_ok=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ HTML Renderer
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = os.path.join(output_path, f"qa_report_{timestamp}.html")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ HTML Renderer
            report_path = self._generate_with_html_renderer(output_file)
            
            logger.info(f"‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QA ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {report_path}")
            return report_path
            
        except Exception as e:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° traceback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error
            import traceback
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô QA: {str(e)}\n{traceback.format_exc()}")
            return ""

    @keyword("Clear QA Report Cache")
    def clear_qa_report_cache(self) -> None:
        """
        ***| Description |***
        - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á QA Report Library
        - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á

        ***| Example |***
        | *`Clear QA Report Cache`* |

        ***| Returns |***
        - **`None`**

        ***| Create By |***
        | *`Tassana Khrueawan`* |
        """
        try:
            logger = get_logger("QAReportLibrary.Cache")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            logger.info("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
            self.report_data = {}
            logger.info("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• report_data ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
            self.report_data_test_summary = {}
            self.report_data_defect_trend = {}
            self.report_data_test_trend = {}
            self.report_data_module_status = {}
            self.report_data_defect_distribution = {}
            self.report_data_resolution_time = {}
            self.report_data_recent_defects = {}
            logger.info("‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            self.test_data = None
            self.defects_data = []
            
            # ‡∏•‡πâ‡∏≤‡∏á cache ‡∏Ç‡∏≠‡∏á UTILS
            clear_cache()
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            self.data_file = None
            self.defects_file = None
            
            logger.info("Cache ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á Cache: {str(e)}")
    
    @keyword("Load Test Data")
    def Load_Test_Data(self):
        return self.report_data

    @keyword("Find Key Html Report")
    def find_key_html_report(self, template_path: str = None, filter_keys: bool = False, with_description: bool = True) -> list:
        """
        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template HTML
        
        Args:
            template_path (str, optional): ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå template HTML ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ keys
                                         ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ self.template_name
            filter_keys (bool, optional): ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
                                      ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô True ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏ß‡πâ
            with_description (bool, optional): ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                                        ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô True ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏ß‡πâ
        
        Returns:
            list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template
            
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template ‡∏´‡∏•‡∏±‡∏Å
            ${KEYS}=    Find Key Html Report
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template ‡∏≠‡∏∑‡πà‡∏ô
            ${KEYS}=    Find Key Html Report    path/to/template.html
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
            ${KEYS}=    Find Key Html Report    path/to/template.html    filter_keys=${TRUE}
        """
        # ‡πÉ‡∏ä‡πâ template_path ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ template_name ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
        template_path = template_path or self.template_name
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á TemplateFinder ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        finder = TemplateFinder()
        return finder.find_template_keys(template_path, filter_keys, with_description)

    @keyword("Check Template Key Exists")
    def check_template_key_exists(self, template_path: str, key_name: str) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (key) ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Args:
            template_path (str): ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå template HTML ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            key_name (str): ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        
        Returns:
            bool: True ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template, False ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö
            
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
            ${EXISTS}=    Check Template Key Exists    path/to/template.html    PROJECT_NAME
        """
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á TemplateFinder ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        finder = TemplateFinder()
        return finder.check_key_exists(template_path, key_name)

    @keyword("Get Template Keys With Value")
    def get_template_keys_with_value(self, template_path: str = None, key_filter: str = None) -> dict:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ render
        
        Args:
            template_path (str, optional): ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå template HTML ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                                           ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ self.template_name
            key_filter (str, optional): ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
                                        ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        Returns:
            dict: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÅ‡∏•‡∏∞ value ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ render
            
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
            # ‡∏î‡∏π‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template
            ${KEY_VALUES}=    Get Template Keys With Value    path/to/template.html
            
            # ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "PROJECT" ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            ${PROJECT_KEY_VALUES}=    Get Template Keys With Value    path/to/template.html    PROJECT
        """
        logger = get_logger("QAReportLibrary.KeyValueFinder")
        
        # ‡πÉ‡∏ä‡πâ template_path ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ template_name ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
        template_path = template_path or self.template_name
        
        if not template_path:
            logger.error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ template_path ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ template_name")
            return {}
        
        if not os.path.exists(template_path):
            logger.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå template: {template_path}")
            return {}
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö render ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.report_data:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö render ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
            self.prepare_report_data()
            
            if not self.report_data:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö render ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
                return {}
        
        # ‡∏´‡∏≤ keys ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå template
        all_keys = self.find_key_html_report(template_path)
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if key_filter:
            filtered_keys = [key for key in all_keys if key_filter.lower() in key.lower()]
        else:
            filtered_keys = all_keys
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        key_values = {}
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ key ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ render ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        for key in filtered_keys:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ö‡∏ö nested (‡πÄ‡∏ä‡πà‡∏ô data.value)
            parts = key.split('.')
            if len(parts) > 1:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ö‡∏ö nested
                curr = self.report_data
                found = True
                for part in parts:
                    if isinstance(curr, dict) and part in curr:
                        curr = curr[part]
                    else:
                        found = False
                        break
                
                if found:
                    key_values[key] = curr
                else:
                    key_values[key] = None
            else:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏õ‡∏Å‡∏ï‡∏¥
                if key in self.report_data:
                    key_values[key] = self.report_data[key]
                else:
                    key_values[key] = None
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        logger.info(f"üîç ‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç {len(key_values)} keys")
        logger.info(f"====================== TEMPLATE KEY VALUES ======================")
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ (‡∏°‡∏µ‡∏Ñ‡πà‡∏≤/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
        has_value_keys = {}
        no_value_keys = {}
        
        for key, value in key_values.items():
            if value is not None:
                has_value_keys[key] = value
            else:
                no_value_keys[key] = None
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        logger.info(f"\nüîπ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ({len(has_value_keys)} keys):")
        for idx, (key, value) in enumerate(sorted(has_value_keys.items()), 1):
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if isinstance(value, dict):
                value_str = f"dict ({len(value)} keys)"
            elif isinstance(value, list):
                value_str = f"list ({len(value)} items)"
            elif isinstance(value, str) and len(value) > 100:
                value_str = f"'{value[:100]}...' ({len(value)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
            else:
                value_str = str(value)
            
            logger.info(f"  {idx}. {key} = {value_str}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        if no_value_keys:
            logger.info(f"\nüîπ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ({len(no_value_keys)} keys):")
            for idx, key in enumerate(sorted(no_value_keys.keys()), 1):
                logger.info(f"  {idx}. {key} = None")
        
        logger.info(f"=============================================================")
        
        return key_values

